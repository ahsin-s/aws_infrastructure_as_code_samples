# cloudformation template
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  BaseImageARN:
    Type: String
    Description: The parent image ARN used as the starting point for the custom AMI
    Default: arn:aws:imagebuilder:us-east-1:aws:image/ubuntu-server-22-lts-x86/x.x.x

  ImagePipelineName:
    Type: String
    Description: A descriptive name for the image pipeline
    Default: Ubuntu22-Docker-CE

  ImageRecipeName:
    Type: String
    Description: A descriptive name for the image recipe, which contains the logic for the image build workflow run
    Default: Build-Ubuntu22-Docker-CE

Description: 'AWS CloudFormation Template for creating an ImagePipeline to build the webservice Ubuntu image'
Resources:
  ImageBuilderPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties:
      Name: !Ref ImagePipelineName
      Description: EC2 Image Builder pipeline for creating Ubuntu image which is used for django+postgres+nginx stack
      ImageRecipeArn: !Ref ImageRecipe
      InfrastructureConfigurationArn: !Ref InfrastructureConfiguration
      DistributionConfigurationArn: !Ref DistributionConfiguration


  ImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Ref ImageRecipeName
      Description: EC2 Image Builder recipe for django+postgres+nginx stack Ubuntu image
      Version: 0.0.1
      ParentImage:
        Fn::Sub: arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:image/ubuntu-server-22-lts-x86/x.x.x
      Components:
        # these component ARNs can be retrieved from the AWS Imagebuilder console
        - ComponentArn: arn:aws:imagebuilder:us-east-1:aws:component/aws-cli-version-2-linux/1.0.4
        - ComponentArn:
              Fn::Sub: arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/update-linux/x.x.x
        # custom component
        - ComponentArn: !Ref DockerComponent

      # this is the disk space needed during image build
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 1
            VolumeType: gp2


      # user data that runs during image creation
      AdditionalInstanceConfiguration:
        UserDataOverride:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash
              sudo systemctl stop snap.amazon-ssm-agent.amazon-ssm-agent.service
              sudo snap refresh amazon-ssm-agent --channel=candidate
              sudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service
  

  Ubuntu22WithLatestSSMAgent:
    Type: AWS::ImageBuilder::Image
    Properties:
      ImageRecipeArn: !Ref ImageRecipe
      InfrastructureConfigurationArn: !Ref InfrastructureConfiguration

  # The infrastructure configuration specifies where the image pipeline actually runs.
  # for example you can specify what ec2 compute instance to run the image pipeline build on.
  InfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      Name: ubuntu-22-lts-docker-installed
      Description: EC2 Image Builder infrastructure configuration
      InstanceProfileName: !Ref InstanceProfile

  # Distribution configurations control where the created AMI can be accessed
  DistributionConfiguration:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: MyDistributionConfiguration
      Description: EC2 Image Builder distribution configuration
      Distributions:
        - Region: us-east-1
          AmiDistributionConfiguration:
            Name: 'webserver-ami-dist-ubuntu-22-latest {{ imagebuilder:buildDate }}'
            Description: AMI distribution
      Tags:
        image_description: 'ubuntu-webserver-django-postgres-nginx-stack'

  # am instance profile is needed to attach the instance role to the ec2 instance
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /executionServiceEC2Role/
      Roles:
        - !Ref InstanceRole

  # the role used during the creation of the AMI
  InstanceRole:
    Type: AWS::IAM::Role
    Metadata:
      Comment: Role to be used by instance during image build.
    Properties:
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub 'ec2.${AWS::URLSuffix}'
        Version: '2012-10-17'
      Path: /executionServiceEC2Role/


  # custom components
  DockerComponent:
    Type: 'AWS::ImageBuilder::Component'
    Properties:
      Name: DockerComponent
      Description: Component to install Docker
      Version: 1.0.0
      Platform: Linux
      Data: |
        name: InstallDockerIntoUbuntu
        description: installs docker community edition into the Ubuntu OS
        schemaVersion: 1.0
        
        phases:
          - name: build
            steps:
              - name: InstallDockerStep
                action: ExecuteBash
                inputs:
                  commands:
                    - sudo apt install -y docker
        

  # SSM is a service that lets you easily manage all of your AWS resources in one place
  SSMParameters:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Image Id for Amazon Linux 2 with the latest version of the Amazon SSM Agent installed
      Name: /test/images/Ubuntu22-LatestSSMAgent
      Type: String
      Value:
        Fn::GetAtt: [Ubuntu22WithLatestSSMAgent, ImageId]

# the Outputs are available in the github action if calling this cloudformation using aws-actions/aws-cloudformation-github-deploy@v1.0.3
# they can also be viewed in the cloudformation console in the Outputs tab
Outputs:
  PipelineName:
    Value: !Ref ImageBuilderPipeline
